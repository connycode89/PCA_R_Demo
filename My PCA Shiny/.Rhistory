shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
library(shiny)
library(stats)
library(calibrate)
library(reporttools)
library(MASS)
library(matlib)
shinyUI(
dashboardPage(
dashboardHeader(title = "Principal Component Analysis Demo"),
sidebarMenu(
#menuItem("Step 1", tabName = "step1", icon = icon("dashboard")),
#menuItem("Step 3", tabName = "step3", icon = icon("th")),
#menuItem("Step 4", tabName = "step4", icon = icon("th")),
menuItem("Step 5", tabName = "step5", icon = icon("th"))
),
dashboardBody(
tabItems(
tabItem(tabName = "step5",
# fluidPage(
titlePanel("Uploading Files"),
sidebarLayout(
sidebarPanel(
fileInput('datafile', 'Choose CSV file',
accept=c('text/csv', 'text/comma-separated-values,text/plain')),
#fileInput('file1', 'Choose CSV File',
#         accept=c('text/csv',
# 'text/comma-separated-values,text/plain',
#                 '.csv')),
#menuItem("Step 2", tabName = "step2", icon = icon("th")),
checkboxInput('header', 'Header', TRUE),
c(Comma=',',
Semicolon=';',
Tab='\t'),
','),
c(None='',
'Double Quote'='"',
'Single Quote'="'"),
'"')
),
mainPanel(
tableOutput('contents'),
tableOutput('meancentered'),
tableOutput('stand'),
plotOutput("plot1", click = "plot_click"),
plotOutput("plot2", click = "plot_click"),
tableOutput('covari'),
textOutput("printeigs1"),
tableOutput('eigenv1'),
plotOutput("plot3", click = "plot_click"),
tableOutput("eigenvMat1"),
tableOutput("matofeigenvec"),
tableOutput("inveigmat"),
plotOutput("screeplot"),
tableOutput("cumulprop"),
uiOutput("inputcomp"),
textOutput("printText"),
tableOutput("changedloadings"),
textOutput("printText2"),
tableOutput("changedscores"),
plotOutput("plot4", click = "plot_click"),
plotOutput("plot5", click = "plot_click"),
textOutput("printText55"),
plotOutput("biplot", click = "plot_click")
)
#)
)
textOutput("printeigs2"),
dashboardSidebar(
)
)
radioButtons('sep', 'Separator',
# First tab content
## Body content
tags$hr(),
#menuItem("Main", tabName = "maindashboard", icon = icon("dashboard")),
radioButtons('quote', 'Quote',
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyServer(function(input, output) {
datasetInput <- reactive({
# Fetch the appropriate data object, depending on the value
# of input$dataset.
switch(input$dataset,
"Rock" = rock,
"Pressure" = pressure,
"Cars" = cars)
})
output$table <- renderTable({
datasetInput()
})
# downloadHandler() takes two arguments, both functions.
# The content function is passed a filename as an argument, and
#   it should write out data to that filename.
output$downloadData <- downloadHandler(
# This function returns a string which tells the client
# browser what name to use when saving the file.
filename = function() {
paste(input$dataset, input$filetype, sep = ".")
},
# This function should write data to a file given to it by
# the argument 'file'.
content = function(file) {
sep <- switch(input$filetype, "csv" = ",", "tsv" = "\t")
# Write to a file specified by the 'file' argument
write.table(datasetInput(), file, sep = sep,
row.names = FALSE)
}
)
}),shinyUI(fluidPage(
titlePanel('File download'),
sidebarLayout(
sidebarPanel(
selectInput("dataset", "Choose a dataset:",
choices = c("Rock", "Pressure", "Cars")),
radioButtons("filetype", "File type:",
choices = c("csv", "tsv")),
downloadButton('downloadData', 'Download')
),
mainPanel(
tableOutput('table')
)
)
))
shiny::runApp()
shiny::runApp()
x <- stats::runif(12); y <- stats::rnorm(12)
i <- order(x, y); x <- x[i]; y <- y[i]
plot(x,y, main = "arrows(.) and segments(.)")
## draw arrows from point to point :
s <- seq(length(x)-1)  # one shorter than data
arrows(x[s], y[s], x[s+1], y[s+1], col = 1:3)
s <- s[-length(s)]
segments(x[s], y[s], x[s+2], y[s+2], col = "pink")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x <- stats::rnorm(50)
xr <- round(x, 1)
stripchart(x) ; m <- mean(par("usr")[1:2])
text(m, 1.04, "stripchart(x, \"overplot\")")
stripchart(xr, method = "stack", add = TRUE, at = 1.2)
text(m, 1.35, "stripchart(round(x,1), \"stack\")")
stripchart(xr, method = "jitter", add = TRUE, at = 0.7)
text(m, 0.85, "stripchart(round(x,1), \"jitter\")")
stripchart(x)
runApp()
runApp()
runApp()
runApp()
runApp()
x <- c(2,8,11,19)
x <- data.frame(x,1) ## 1 is your "height"
plot(x, type = 'o', pch = '|', ylab = '')
runApp()
x <- c(2,8,11,19)
x <- data.frame(x,1) ## 1 is your "height"
plot(x, type="b")
install.packages("made4")
stripchart(len ~ dose, data = ToothGrowth,
pch = 19, frame = FALSE)
len
ToothGrowth$len
stripchart(len, data = ToothGrowth,
pch = 19, frame = FALSE)
stripchart(ToothGrowth$len,
pch = 19, frame = FALSE)
stripchart(ToothGrowth$len,
pch = 19, frame = TRUE)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
a
a<-1
a<-1
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("fpc")
library(fpc)
set.seed(4634)
face <- rFace(600,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plot(face, col = grface)
#  pairs(face, col = grface, main ="rFace(600,dMoNo=2,dNoEy=0)")
face
face[,1]
face[,2]
View(face)
fgh <- data.frame(c(face[,1],face[,2]))
fgh
View(fgh)
fgh <- cbind(face[,1],face[,2])
fgh
View(fgh)
plot(fgh)
write.csv(fgh,file="Desktop\\file1.csv")
write.csv(fgh,file="Desktop//file1.csv")
write.csv(fgh,file="file1.csv")
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
library(stats)
library(calibrate)
library(reporttools)
library(MASS)
library(matlib)
library(shinydashboard)
ui <- dashboardPage(skin="red",
dashboardHeader(title = "PCA Demonstration"),
dashboardSidebar(
sidebarMenu(
menuItem("Input Data Via CSV File", tabName = "maindashboard2", icon = icon("file-excel-o")),
menuItem("Mean Subtraction & Scaling", tabName = "links", icon = icon("scale",lib="glyphicon")),
menuItem("Scatter Plots of the Data", tabName = "patterns", icon = icon("line-chart")),
menuItem("Compute Covariance Matrix (C)", tabName = "communities", icon = icon("th")),
menuItem("Eigenvalues/vectors of C", tabName = "pathways", icon = icon("line-chart")),
menuItem("Displaying D, V, V^-1", tabName = "pathways1", icon = icon("th")),
menuItem("2 PC Retention Criteria", tabName = "pathways2", icon = icon("info")),
menuItem("Select Number of PCs to Retain", tabName = "pathways3", icon = icon("hand-pointer-o")),
menuItem("Biplot", tabName = "pathways4", icon = icon("line-chart"))
#menuItem("Download Scores", tabName = "pathways5", icon = icon("th"))
)
),
## Body content
runApp()
runApp()
for (i in seq(1:5)){}
for (i in seq(1:5)){
lambdas <- c()
for (i in seq(1:5)){
lambdas <- c(paste(Lambda,i,""))}
lambdas <- c()
for (i in seq(1:5)){
lambdas <- c(paste("Lambda",i,""))}
lambdas
lambdas <- c()
for (i in seq(1:5)){
lambdas <- c(lambdas,paste("Lambda",i,""))}
lambdas
lambdas <- c()
for (i in seq(1:5)){
lambdas <- c(lambdas,paste("Lambda",i,sep=""))}
lambdas
lambdas2 <- c()
for (i in seq(1:5)){
lambdas2 <- c(lambdas2,5)}
lambdas2
cbind(lambdas,lambdas2)
runApp()
data.frame(c(1,2,3,4),nrow=2)
matrix(c(1,2,3,4),nrow=2)
length(matrix(c(1,2,3,4),nrow=2))
dim(matrix(c(1,2,3,4),nrow=2))
a <- c(1,2,3)
b <- c(4,5,6)
fgh <- cbind(a,b)
fgh
dim(fgh)
length(fgh)
runApp()
runApp()
runApp()
?expression
plot(1,1, main=expression('title'^2))
expression('title'^2)
"title"^2
paste0("n","^","th")
"r^2"
"r"^"2"
"r_2"
expression(paste("This is a ", test^1, " of the Emergency Broadcast System."))
print(expression(paste("This is a ", test^1, " of the Emergency Broadcast System.")))
text(expression(paste("This is a ", test^1, " of the Emergency Broadcast System.")))
plot(1:10)
legend('topleft', expression(4^th*"-root transformation"))
expression(4^th*"-root transformation")
text(expression(4^th*"-root transformation"))
string(expression(4^th*"-root transformation"))
expression("sad"^"aada")
runApp()
install.packages("scatterplot3d")
library("scatterplot3d")
x1 <- c(1,-1)
x1 <- c(1,0,-1)
y1 <- c(1,0,-1)
z1 <- c(1,0,0)
scatterplot3d(x1,y1,z1)
x1 <- c(1,0,-1)
y1 <- c(1,0,1)
z1 <- c(1,0,0)
scatterplot3d(x1,y1,z1)
x1 <- c(1,0,-1,-1)
y1 <- c(1,0,1,0)
z1 <- c(1,0,0,1)
scatterplot3d(x1,y1,z1)
arrows(0,0,1,0)
install.packages("plot3D")
library(plot3D)
scatter3D(x1,y1,z1)
arrows3D(0,0,0,1,1,1)
arrows3D(0,0,0,-1,1,0)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
install.packages("Ecdat")
library(Ecdat)
CRANpackages
FinancialCrisisFiles
financialCrisisFiles()
financialCrisisFiles(
financialCrisisFiles
financialCrisisFiles
data(financialCrisisFiles)
xcv <- data(financialCrisisFiles)
xcv
shiny::runApp()
x<-c(1,2,3,4)
y<-c(2,3,4,5)
plot(x,y)
eigen(c(1))
matrix(c(1,2,3,4),nrow=2,ncol=2)
a = matrix(c(5,4,4,5,6,5,5,6),nrow = 4,ncol=2)
a
t(a)
data <- a
dataT <- t(a)
data
cov(data)
cov(dataT)
eig(cov(data))
eig(cov(dataT))
mat1 = matrix(c(10.625,-5.125,7.625,-13.125,-5.125,8.125,-1.125,-1.875,7.625,-1.125,6.625,-13.125,-13.125,-1.875,-13.125,28.125),nrow = 4,ncol = 4)
mat1
mat2 = matrix(c(32.75,13.75,13.75,20.75),nrow = 2,ncol = 2)
eig(mat1)
eig(mat2)
